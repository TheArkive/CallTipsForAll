Flow
Break
`Break [LoopLabel]
`/docs/commands/Break.htm


Flow
Catch
`
Catch [OutputVar]    |or|    Catch [OutputVar] {
    Statement        |  |        Statements
                     |  |    }
`/docs/commands/Catch.htm


Flow
Continue
`Continue [LoopLabel]
`/docs/commands/Continue.htm


Flow
Critical
`Critical [OnOffNumeric]
`/docs/commands/Critical.htm


Flow
Else
`
Else Statement    |or|   Else {
                  |  |       Statements
                  |  |   }
`/docs/commands/Else.htm


Flow
Exit
`Exit [ExitCode]
`/docs/commands/Exit.htm


Flow
ExitApp
`ExitApp [ExitCode]
`/docs/commands/ExitApp.htm


Flow
Finally
`
Finally Statement    |or|    Finally {
                     |  |        Statements
                     |  |    }
`/docs/commands/Finally.htm


Flow
For
`For Value1 [, Value2] in Expression {...}
`/docs/commands/For.htm


Flow
Gosub
`Gosub Label    or    Gosub("Label")
`/docs/commands/Gosub.htm


Flow
Goto
`Goto Label    or    Goto("Label")
`/docs/commands/Goto.htm


Flow
If
`
If (Expression) {
    Statements
}
`/docs/commands/If.htm


Flow
Loop
`Loop {...}    or    Loop [Count] {...}
`/docs/commands/Loop.htm


Flow
Files
`Loop Files FilePattern [, Mode]
`/docs/commands/LoopFiles.htm


Flow
Parse
`Loop Parse String [, Delimiters, OmitChars]
`/docs/commands/LoopParse.htm


Flow
Reg
`Loop Reg KeyName [, Mode]
`/docs/commands/LoopReg.htm


Flow
OnError
`OnError Func [, AddRemove]
`/docs/commands/OnError.htm


Flow
OnExit
`OnExit Func [, AddRemove]
MyFunction(, )
`/docs/commands/OnExit.htm


Flow
Pause
`#p::Pause    or    Pause [OnOffToggle, OperateOnUnderlyingThread]
`/docs/commands/Pause.htm


Flow
Reload
`Reload
`/docs/commands/Reload.htm


Flow
Return
`Return [Expression]
`/docs/commands/Return.htm


Flow
SetTimer
`SetTimer [Callback, Period, Priority]
`/docs/commands/SetTimer.htm


Flow
Sleep
`Sleep DelayInMilliseconds
`/docs/commands/Sleep.htm


Flow
Suspend
`Suspend [Mode]
`/docs/commands/Suspend.htm


Flow
Switch
`Switch [SwitchValue]
{
    Case CaseValue1:
        Statements1
    Case CaseValue2a, CaseValue2b:
        Statements2
    Default:
        Statements3
}
`/docs/commands/Switch.htm


Flow
Thread
`
Thread  [, Value1, Value2]           |or|    Thread "Priority", Level
Thread "NoTimers" [, TrueOrFalse]    |  |    Thread "Interrupt" [, Duration, LineCount]
`/docs/commands/Thread.htm


Flow
Throw
`Throw [Expression]
`/docs/commands/Throw.htm


Flow
Try
`
Try Statement    |or|    Try {
                 |  |        Statements
                 |  |    }
`/docs/commands/Try.htm


Flow
Until
`Loop {
    ...
} Until Expression
`/docs/commands/Until.htm


Flow
While
`While Expression
`/docs/commands/While.htm