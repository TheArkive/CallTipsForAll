Flow
Break
`Break [, LoopLabel]
`/docs/commands/Break.htm


Flow
Catch
`Catch [, OutputVar] {
    Statements
}
`/docs/commands/Catch.htm


Flow
Continue
`Continue [, LoopLabel]
`/docs/commands/Continue.htm


Flow
Critical
`Critical [, OnOffNumeric]
`/docs/commands/Critical.htm


Flow
Else
`Else {
    Statements
}
`/docs/commands/Else.htm


Flow
Exit
`Exit [, ExitCode]
`/docs/commands/Exit.htm


Flow
ExitApp
`ExitApp [, ExitCode]
`/docs/commands/ExitApp.htm


Flow
Finally
`Finally {
    Statements
}
`/docs/commands/Finally.htm


Flow
For
`For Key [, Value] in Expression
`/docs/commands/For.htm


Flow
Gosub
`Gosub, Label
`/docs/commands/Gosub.htm


Flow
Goto
`Goto, Label
`/docs/commands/Goto.htm


Flow
Between
`If var [not] between LowerBound and UpperBound
`/docs/commands/IfBetween.htm


Flow
IfEqual
`IfEqual, Var [, Value]          
`/docs/commands/IfEqual.htm


Flow
IfNotEqual
`IfNotEqual, Var [, Value]       
`/docs/commands/IfEqual.htm


Flow
IfLess
`IfLess, Var [, Value]           
`/docs/commands/IfEqual.htm


Flow
IfLessOrEqual
`IfLessOrEqual, Var [, Value]    
`/docs/commands/IfEqual.htm


Flow
IfGreater
`IfGreater, Var [, Value]        
`/docs/commands/IfEqual.htm


Flow
IfGreaterOrEqual
`IfGreaterOrEqual, Var [, Value] 
`/docs/commands/IfEqual.htm


Flow
IfExist
`IfExist, FilePattern
`/docs/commands/IfExist.htm


Flow
IfNotExist
`IfNotExist, FilePattern
`/docs/commands/IfExist.htm


Flow
If
`If (Expression) {
    Statements
}
`/docs/commands/IfExpression.htm


Flow
In
`if Var in MatchList
if Var not in MatchList
`/docs/commands/IfIn.htm


Flow
Contains
`if Var contains MatchList
if Var not contains MatchList
`/docs/commands/IfIn.htm


Flow
IfInString
`IfInString, Var, SearchString
`/docs/commands/IfInString.htm


Flow
IfNotInString
`IfNotInString, Var, SearchString
`/docs/commands/IfInString.htm


Flow
Is
`if Var is Type
if Var is not Type
`/docs/commands/IfIs.htm


Flow
IfMsgBox
`IfMsgBox, ButtonName
`/docs/commands/IfMsgBox.htm


Flow
Loop
`Loop [, Count]
`/docs/commands/Loop.htm


Flow
Files
`Loop, Files, FilePattern [, Mode]
`/docs/commands/LoopFile.htm


Flow
Parse
`Loop, Parse, InputVar [, Delimiters, OmitChars]
`/docs/commands/LoopParse.htm


Flow
Reg
`Loop, Reg, KeyName [, Mode]
`/docs/commands/LoopReg.htm


Flow
OnError
`OnError(Func [, AddRemove])
`/docs/commands/OnError.htm


Flow
OnExit
`OnExit(Func [, AddRemove])
OnExit [, Label]
ExitFunc(ExitReason, ExitCode)
`/docs/commands/OnExit.htm


Flow
Pause
`#p::Pause 
Pause [, OnOffToggle, OperateOnUnderlyingThread]
`/docs/commands/Pause.htm


Flow
Reload
`Reload
`/docs/commands/Reload.htm


Flow
Return
`Return [, Expression]
`/docs/commands/Return.htm


Flow
SetBatchLines
`SetBatchLines, 20ms
SetBatchLines, LineCount
`/docs/commands/SetBatchLines.htm


Flow
SetTimer
`SetTimer [, Label, PeriodOnOffDelete, Priority]
`/docs/commands/SetTimer.htm


Flow
Sleep
`Sleep, DelayInMilliseconds
`/docs/commands/Sleep.htm


Flow
Suspend
`Suspend [, Mode]
`/docs/commands/Suspend.htm


Flow
Switch
`Switch [SwitchValue]
{
    Case CaseValue1:
        Statements1
    Case CaseValue2a, CaseValue2b:
        Statements2
    Default:
        Statements3
}
`/docs/commands/Switch.htm


Flow
Thread
`Thread, SubCommand [, Value1, Value2]
/SubCommands:  NoTimers, Priority, Interrupt
`/docs/commands/Thread.htm


Flow
Throw
`Throw [, Expression]
Exception(Message [, What, Extra])
`/docs/commands/Throw.htm


Flow
Try
`Try {
    Statements
}
`/docs/commands/Try.htm


Flow
Until
`Loop {
    ...
} Until Expression
`/docs/commands/Until.htm


Flow
While
`While Expression
While(Expression) { ... }
`/docs/commands/While.htm


Flow
IfWinActive
`IfWinActive [, WinTitle, WinText, ExcludeTitle, ExcludeText]
`/docs/commands/WinActive.htm


Flow
IfWinNotActive
`IfWinNotActive [, WinTitle, WinText, ExcludeTitle, ExcludeText]
`/docs/commands/WinActive.htm


Flow
IfWinExist
`IfWinExist [, WinTitle, WinText, ExcludeTitle, ExcludeText]
`/docs/commands/WinExist.htm


Flow
IfWinNotExist
`IfWinNotExist [, WinTitle, WinText, ExcludeTitle, ExcludeText]
`/docs/commands/WinExist.htm


