This documents explains how to get the most out of using this script to display
call tips on demand using the included configuration files.

This script allows you to add multiple languages for use with call tips.  This
document explains how to design each language folder.

Please note that examples are indented for clarity.  The indentation is NOT
meant to be used verbatim.  The column of pipe (|) characters represents the
left edge of the document.

All regex matches are UNQUOTED in all List_*.txt files.

================================================================================
Table of Contents
================================================================================

1. Folder Structure
2. Script Settings
3. Commands List
4. Object Lists
5. Hotkeys

================================================================================
1. Folder Structure
================================================================================

All entries are folders unless they have an extension.

	ScriptDir
		Languages     <--- base dir for languages
			LangName    <--- base dir for any single language
				Keywords
					KW_*.txt (optional)
				Objects
					List_ObjType.txt
				Other
					List_Commands.txt
					List_Functions.txt
		CallTipsForAll.ahk   <---   script file

================================================================================
2. Script Settings
================================================================================

Modify script settings in the Settings window.  You can access the Settings
window from the tray menu.
	
================================================================================
3. Other folder - including only 1 to 1 references
================================================================================

The "Other" folder consists of files named List_*.txt  (ie. List_Commands.txt).
Only one file is needed but you can use multiple files to break things up into 
categories, and for easier proofing.

A "Command List" in this context simply means something that can be expressed as
"1 to 1".  Functions and commands have a single name, and a definition.  Objects
on the other hand have the "object name" as well as a list of nested methods,
properties, and other objects (in some cases).
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
The format for files in the Other folder is as follows.  All entries must be
separated by 2 blank lines (a total of 3 CRLFs). All entries are multi-line
entries.

Example:
	|
	|Entry
	|
	|
	|Entry
	|
	|
	|...
	|

The format for each "Entry" is as follows:
	|
	|Type                       <--- Function, Command, Flow, Operator, etc.
	|Element_Name
	|`multi-line_call_tip_text  <--- First call tip (starts with Chr(96))
    |more text for first call tip.
	|`another_call_tip ...      <--- optional
	|`help_link_to_chm_topic    <--- required, can be blank
	|

The user will use Up/Down arrows to scroll between the various call tips.

You can have single blank lines in the description, but I don't recommend this
for the sake of grouping and clarity.  Instead format your descriptions like so:
	|
	|`Desc start line.
	|/Start a line with forward slash to add a CRLF before it.
	|Forward slashes (/) can still be used within the desc.
	|Only forward slashes at the beginning of the line will
	|create extra CRLFs.
	|`This starts another call tip entry.  Scroll call tips with UP/DOWN keys.

For CHM help links, decompile the CHM to see the dir structure.  You can
decomplie a CHM with HTML Help Workshop.
Link: https://www.microsoft.com/en-us/download/details.aspx?id=21138
CHM Help Link example:   /docs/folder/file.htm
                         /docs/folder/file.htm#ID_section

================================================================================
4. Object Lists
================================================================================

Ensure your object list files are placed in the proper folder as described
above.  The structure of each file is as follows:
	|
	|Regex matches (multi-line)  <-- first batch of lines
    |... more regex matches
    |... take as many lines as you need
    |... to identify as many objects as you want...
	|`custom_call_tip_for_obj    <-- First call tip
    |remember, all call tips can be multi-line
	|`another call tip           <--- optional
    |2nd line of 2nd calltip
    |`ObjectOverLapList          <--- required, can be blank
	|`help_link_to_chm_topic     <--- required, can be blank
	|
	|
	|Method or Property Entry
	|
	|
	|Method or Property Entry
	|
	|
	|...
	|

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
The "Regex matches (multi-line)" are formatted as follows:
	|
	|Level ObjType Label RegexMatchStr    <--- separated by spaces
	|   ie...
	|0 ArrayObject ArrayByFunc Array\(

> Level is an integer from 0-9.  It indicates which order the objects should be
loaded in.  Some objects are derived from other objects, so it is important to
set the level correctly, otherwise some objects may not show if you don't take
the proper order into account.

> ObjType is a string such as "GuiObject".  This is normally consistent on each
line within a single regex line batch, but different related objects that share
methods/properties can be grouped into the same list file if it makes sense to
do so.

> Label this can be anything but it MUST be unique across ALL of the object
list files.

> RegExMatchStr must match the expression that represents the value of the var
(meaning everything to the right of the operator that assigns the value, like = 
or :=). The other case is described later.  Be sure to NOT use literal braces \{
 or \} in the regex as this will confuse the script.  Use \x7B and \x7D instead.
Braces are used on level 1+ lines to indicated that a specific {ObjectType} must
be substituted.  So, the list of all level 0 objects will be parsed to find a
match.  All other levels are parsed the same way.

Be careful using ^ and $, otherwise your scope may be too specific.
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Some objects are not set by assignment and must be detected differently.  You
can identify an object in that case using comments:

0 InputHookObject InputHookByComment ;[ \t]*InputHookObject
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Some objects are derived from callback function parameters.  Matching callback
objects should be done starting on level 2.  Here's an example:

2 InputHookObject InputHookByCallback [\w]+\x28([\w]+).*;[ \t]*InputHook

The above line would match "iHook" in the following InputHook callback example:
	|
	|IH := InputHook("V I1","","")
	|IH.OnKeyDown := Func("keyPress")
	|
	|keyPress(iHook, VK, SC) { ; InputHookObject    <--- object match
	|	; ... function content
	|}
	|

Matching objects this way can be a bit dicey, since it requires specific
instances that may be sometimes obsecure.  Use with caution.
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Each "Method or Property Entry" is formatted as follows:
	|Format:           |Example:
	|                  |
	|Type              |Method
	|Name              |DefineMethod
	|`Desc-multi-line  |`Obj.DefineMethod(Name,FuncObj)   <--- required
    |`2nd call tip     |`Another call tip...              <--- optional
	|`CHM_help_Link    |`/docs/folder/item.htm      <--- required, can be blank

Extra line breaks after the ` are not necessary.  The extra breaks are only
shown here for clarity.  If desired, you can omit all line breaks surrounding
the ` character for each entry.

> Type is "Method" or "Property".

> Name is the name of the method or property.  Do not add extra dots (.) or
parenthesis.

> Description is the same as Functions and Commands.  You can use the Chr(96) `
to separate additional multi-line descrptions and you can use forward slash (/)
at the beginning of a line to add a CRLF.

================================================================================
5. Hotkeys
================================================================================

Set hotkeys in the settings window from the tray icon.